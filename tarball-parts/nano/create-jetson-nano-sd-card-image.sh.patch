--- a/create-jetson-nano-sd-card-image.sh	2019-04-10 10:52:55.571005225 +0200
+++ b/create-jetson-nano-sd-card-image.sh	2019-04-10 12:51:47.636862929 +0200
@@ -57,7 +57,9 @@
 	fi
 
 	if [ -n "${loop_dev}" ]; then
+		sync
 		losetup -d "${loop_dev}"
+		sync
 	fi
 }
 trap cleanup EXIT
@@ -148,7 +148,7 @@
 	echo "${script_name} - creating signed images"
 
 	# Generate flashcmd.txt for signing images
-	BOARDID="3448" FAB="${rev}" "${l4t_dir}/flash.sh" "--no-flash" "p3448-0000-sd" "mmcblk0p1"
+	BOARDID="3448" FAB="${rev}" "${l4t_dir}/flash.sh" "-r" "--no-flash" "p3448-0000-sd" "mmcblk0p1"
 
 	if [ ! -f "${bootloader_dir}/flashcmd.txt" ]; then
 		echo "ERROR: ${bootloader_dir}/flashcmd.txt not found" > /dev/stderr
@@ -169,7 +171,12 @@
 {
 	echo "${script_name} - create partitions"
 
+	boot_part_file=system-boot.ext4
+	boot_part_size=$(stat --printf=%s "${bootloader_dir}/$boot_part_file")
+	system_part_file=system-data.ext4
+	system_part_size=$(stat --printf=%s "${bootloader_dir}/$system_part_file")
 	partitions=(\
+		"part_num=1;part_name=APP;part_size=$boot_part_size;part_file=$boot_part_file" \
 		'part_num=2;part_name=TBC;part_size=131072;part_file=nvtboot_cpu.bin.encrypt' \
 		'part_num=3;part_name=RP1;part_size=458752;part_file=tegra210-p3448-0000-p3449-0000-${dtb_id}.dtb.encrypt' \
 		'part_num=4;part_name=EBT;part_size=589824;part_file=cboot.bin.encrypt' \
@@ -181,7 +188,7 @@
 		'part_num=10;part_name=DTB;part_size=458752;part_file=tegra210-p3448-0000-p3449-0000-${dtb_id}.dtb.encrypt' \
 		'part_num=11;part_name=RP4;part_size=131072;part_file=rp4.blob' \
 		'part_num=12;part_name=BMP;part_size=81920;part_file=bmp.blob' \
-		'part_num=1;part_name=APP;part_size=0;part_file='
+		"part_num=13;part_name=writable;part_size=$system_part_size;part_file=$system_part_file"
 	)
 
 	part_type=8300 # Linux Filesystem
@@ -205,13 +212,7 @@
 	for part in "${partitions[@]}"; do
 		eval "${part}"
 		target_file=""
-		if [ "${part_name}" = "APP" ]; then
-			echo "${script_name} - writing rootfs image"
-			mkfs.ext4 -j "${loop_dev}p${part_num}"
-			mount "${loop_dev}p${part_num}" "${tmpdir}"
-			cp -a "${rfs_dir}"/* "${tmpdir}"
-			umount "${tmpdir}"
-		elif [ -e "${signed_image_dir}/${part_file}" ]; then
+		if [ -e "${signed_image_dir}/${part_file}" ]; then
 			target_file="${signed_image_dir}/${part_file}"
 		elif [ -e "${bootloader_dir}/${part_file}" ]; then
 			target_file="${bootloader_dir}/${part_file}"
@@ -224,7 +225,9 @@
 	done
 
 	rmdir "${tmpdir}"
+	sync
 	losetup -d "${loop_dev}"
+	sync
 	tmpdir=""
 	loop_dev=""
 }
